[
  {
    "id": "project-mental-health",
    "name": "Digital Mental Health Assessment",
    "description": "An interactive web application that evaluates mental health conditions such as depression and anxiety based on behavioral patterns, substance use, trauma, and gaming habits. Built with Streamlit and integrated ML models to provide assessments and visualized user progress through a dynamic dashboard.",
    "shortDescription": "Streamlit-based mental health evaluation web app.",
    "techStack": ["Python", "Streamlit", "SQLite", "Scikit-learn", "XGBoost"],
    "installation": "# Instructions to Build the App from Source Code\n1. Clone the repository.\n2. Create and activate a new virtual environment using Python 3.13.0:\n   - `python3 -m venv <env>` or `conda create -n <env>`\n   - Activate it using:\n     - Windows: `./<env>/Scripts/activate`\n     - macOS/Linux: `source <env>/bin/activate`\n     - Anaconda: `conda activate <env>`\n3. Install dependencies with `pip3 install -r requirements.txt`\n4. Run the app using `streamlit run app.py` (Web app opens at localhost)",
    "features": [
      "Interactive assessments tailored to user profile",
      "ML models for classifying and predicting mental health indicators",
      "Version-controlled model management with SQLite backend",
      "Dashboard with downloadable assessment history",
      "Secure login/signup and persistent user data with CRUD operations",
      "Dynamic questionnaire based on profile (age, habits, etc.)"
    ],
    "github": "#",
    "live": "https://mentalhealthevaluation.streamlit.app/",
    "image": "assets/images/project3.png",
    "gallery": ["assets/images/project3_1.png"],
    "model3d": null
  },
  {
    "id": "project-portfolio-site",
    "name": "Interactive Portfolio Website",
    "description": "A personal portfolio website built using HTML, CSS, and JavaScript to showcase projects, skills, and experience. Designed with a search feature to filter projects by skills and powered by JSON to dynamically load and display content. Deployed via GitHub Pages for seamless access.",
    "shortDescription": "Portfolio website with skill-based project filtering.",
    "techStack": ["JavaScript", "HTML", "CSS", "JSON", "GitHub Pages"],
    "installation": "# Deployment Instructions\n1. Clone or fork the repository.\n2. Open `index.html` in a browser to preview locally.\n3. Push to a GitHub repository.\n4. Enable GitHub Pages from the repository settings to deploy.\n   - Set the source to the main branch `/root` directory.",
    "features": [
      "Skill-based search functionality for projects",
      "JSON-based dynamic data rendering",
      "Responsive design across devices",
      "Modular file structure (HTML for sections, JSON for data, JS for interaction)",
      "Hosted on GitHub Pages"
    ],
    "github": "#",
    "live": "https://saksham-lakhera.github.io/sakshamlakhera.github.io/",
    "image": "assets/images/project4.png",
    "gallery": ["assets/images/project4.png"],
    "model3d": null
  },{
    "id": "project-lunchmate",
    "name": "LunchMate: Social Lunch Matching App",
    "description": "LunchMate is a social networking platform designed to help university students connect over shared meals. The app uses a highly normalized PostgreSQL database (up to BCNF) to manage user data, availability, preferences, and matches, reducing redundancy and ensuring data integrity. Built with Flask, JavaScript, and SQLAlchemy ORM, it facilitates meaningful one-on-one or group interactions through interest-based matching and smart recommendations.",
    "shortDescription": "Flask-based lunch matching app using BCNF-optimized SQL schema.",
    "techStack": ["Flask", "JavaScript", "PostgreSQL", "SQLAlchemy", "HTML", "CSS"],
    "installation": "# Installation\n1. Clone the repository\n2. Set up a virtual environment\n3. Install dependencies using `pip install -r requirements.txt`\n4. Set up the PostgreSQL database and run migrations\n5. Start the Flask server using `flask run`",
    "features": [
      "BCNF-normalized PostgreSQL schema to reduce data redundancy",
      "Interest and availability-based matchmaking system",
      "Group and one-on-one lunch meetups",
      "AI-generated restaurant and conversation suggestions",
      "User registration, authentication, profile, and food preferences",
      "Secure interaction with block and report features",
      "ORM-based backend using SQLAlchemy for scalable data management"
    ],
    "github": "#",
    "live": null,
    "image": "assets/images/project5.png",
    "gallery": ["assets/images/project5_1.png","assets/images/project5_2.png"],
    "model3d": null
  },
  {
    "id": "project-1",
    "name": "Crypto Challenge Bot Protection",
    "description": "A stateless bot detection and prevention system that uses cryptographic challenges to distinguish between legitimate clients and bots. The system was migrated from a centralized Django server to edge servers in C to improve performance.",
    "shortDescription": "Bot protection system using cryptographic challenges.",
    "techStack": ["C", "JavaScript", "Java", "Distributed Systems", "Blockchain","XML(Metadata)","Akamai Edge servers"],
    "installation": "# Enterprise deployment\n# Not publicly available # Patent pending technology",
    "features": [
      "Distributed processing across 365,000+ edge servers",
      "Reduced server hops for verification, doubling speed",
      "Increased customer adoption from 107 to 243",
      "Stateless challenge-response mechanism",
      "Advanced bot fingerprinting techniques",
      "Blockchain based challenge generation",
      "Metadata processing for challenge generation",
      "Akamai edge servers for Stateless challenge processing",
      "Patent filed for version 2.0 with me as Lead Inventor"
    ],
    "github": "#",
    "live": null,
    "image": "assets/images/project1.png",
    "gallery": [],
    "model3d": "cryptochallenge"
  },
  {
    "id": "project-2",
    "name": "Adaptive Challenge System",
    "description": "A Stateful bot detection feature using JavaScript, Java, and Akamai Metadata. This system uses behavioral analysis to detect bots and uses cryptographic challenges to deter bots, it also adapts to different client environments to provide the most effective challenge while maintaining a seamless user experience.",
    "shortDescription": "Advanced adaptive bot detection system.",
    "techStack": ["JavaScript", "Java", "AngularJS", "Metadata Processing"],
    "installation": "# Enterprise deployment\n# Not publicly available",
    "features": [
      "Integrated into 27 customer solutions",
      "Serving millions of users daily",
      "Adaptive challenge selection based on client capabilities",
      "Minimal performance impact on legitimate users",
      "Behavioral analysis to detect bots",
      "Cryptographic challenges to deter bots and avoid DDos attacks",
      "Redis database for storing challenge state"
    ],
    "github": "#",
    "live": null,
    "image": "assets/images/project2.png",
    "gallery": ["assets/images/project2.png"],
    "model3d": "adaptivechallenge"
  },
  {
    "id": "project-5",
    "name": "Distributed Database Cluster",
    "description": "A high-performance 70-node SingleStore distributed database cluster deployed on Microsoft Azure for SLA tracking and analytics. The system featured automated infrastructure provisioning with Terraform, advanced ETL workflows using Airflow, and real-time monitoring with Prometheus and Grafana. It also included a secure Python-based API layer over a Spark data warehouse for scalable querying.",
    "shortDescription": "Automated SingleStore cluster on Azure with ETL and secure API.",
    "techStack": ["Azure", "Terraform", "SingleStore", "Airflow", "Spark", "SQL", "Prometheus", "Grafana", "Python", "JWT", "OAuth2", "OpenAPI", "ORM"],
    "installation": "# Enterprise deployment\n# Not publicly available",
    "features": [
      "70-node SingleStore distributed cluster on Azure",
      "Automated provisioning and key management using Terraform",
      "95% reduction in manual deployment effort",
      "30% improvement in BI performance through optimized SQL schemas and views",
      "Airflow-managed ETL pipelines for scalable data processing",
      "Prometheus and Grafana for real-time cluster monitoring and alerting",
      "Secure Python-based API over Spark warehouse with OAuth 2.0 and JWT"
    ],
    "github": "#",
    "live": null,
    "image": "assets/images/project6.png",
    "gallery": ["assets/images/project6.png"],
    "model3d": "databasecluster"
  },
  {
    "id": "project-whatsapp-chatbot",
    "name": "AI Chatbot for WhatsApp",
    "description": "A personalized chatbot built using a sequence-to-sequence model that mimics your texting style on WhatsApp. Inspired by a scene from *Silicon Valley*, the bot is trained on chat history and interacts via WhatsApp Web. It was built in 2020 before the popularity of modern LLMs, and demonstrates the power of classical NLP models for chat automation.",
    "shortDescription": "WhatsApp chatbot that mimics your texting style using seq2seq.",
    "techStack": ["Python", "TensorFlow", "NumPy", "Pickle", "Selenium", "WhatsApp Web"],
    "installation": "# Setup Instructions\n1. Export your WhatsApp chat as a.txt file\n2. Run `preprocess.py` to clean and structure the data:\n   ```bash\n   python preprocess.py --input chat.txt --output formatted_data.pkl\n   ```\n3. Train the model:\n   ```bash\n   python train.py --data formatted_data.pkl --epochs 50 --batch_size 32\n   ```\n4. Start the chatbot:\n   ```bash\n   python chatbot.py\n   ```",
    "features": [
      "Learns your texting style from WhatsApp chat history",
      "Imitates personalized responses with a sequence-to-sequence model",
      "Exports and cleans WhatsApp messages for model input",
      "Chatbot integrates via WhatsApp Web (Selenium)",
      "Training pipeline with custom preprocessing and tokenization",
      "Pre-LLM AI chatbot inspired by *Silicon Valley*"
    ],
    "github": "https://github.com/Saksham-Lakhera/AI-chatbot-for-Whatsapp-using-sequence-to-sequence-model",
    "live": "https://sakshamlakhera.medium.com/converting-yourself-into-a-chatbot-and-let-ai-version-of-you-talk-to-your-friends-on-whatsapp-84b51ba32c8f",
    "image": "assets/images/project7.png",
    "gallery": ["assets/images/project7_2.png"],
    "model3d": null
  }
]
